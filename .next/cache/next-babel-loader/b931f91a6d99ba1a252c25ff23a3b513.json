{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/nnoll/dev/firelist/client/components/countdown/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport styles from './styles.module.scss';\n\nvar Countdown = /*#__PURE__*/function (_React$Component) {\n  _inherits(Countdown, _React$Component);\n\n  var _super = _createSuper(Countdown);\n\n  function Countdown() {\n    var _this;\n\n    _classCallCheck(this, Countdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      timerTime: 25 * 60 * 1000,\n      //25min base time\n      sessionCount: 0,\n      isBreak: false,\n      isTicking: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"playGong\", function () {\n      var gong = document.getElementsByClassName(\"audioElement\")[0];\n      gong.play();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"startTimer\", function (isBreak) {\n      _this.timer = setInterval(function () {\n        var newTime = _this.state.timerTime - 100;\n\n        if (newTime >= 0) {\n          _this.setState({\n            timerTime: newTime,\n            isBreak: isBreak,\n            isTicking: true\n          });\n        } else {\n          clearInterval(_this.timer);\n\n          _this.setState({\n            isTicking: false\n          });\n\n          if (isBreak) {\n            alert(\"Break Done\");\n\n            _this.playGong();\n          } else {\n            _this.setState({\n              sessionCount: _this.state.sessionCount + 1\n            });\n\n            _this.playGong();\n\n            alert(\"Session Done\");\n          }\n        }\n      }, 100);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"stopTimer\", function () {\n      clearInterval(_this.timer);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"goSession\", function () {\n      var sessionDuration = 25 * 60 * 10;\n\n      _this.setState({\n        timerTime: sessionDuration\n      });\n\n      clearInterval(_this.timer);\n\n      _this.startTimer(false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"goBreak\", function () {\n      var sessionDuration = 5 * 60 * 100;\n\n      _this.setState({\n        timerTime: sessionDuration\n      });\n\n      clearInterval(_this.timer);\n\n      _this.startTimer(true);\n    });\n\n    return _this;\n  }\n\n  _createClass(Countdown, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          timerTime = _this$state.timerTime,\n          isBreak = _this$state.isBreak,\n          isTicking = _this$state.isTicking,\n          sessionCount = _this$state.sessionCount;\n      var seconds = (\"0\" + Math.floor(timerTime / 1000 % 60) % 60).slice(-2);\n      var minutes = (\"0\" + Math.floor(timerTime / 60000 % 60)).slice(-2);\n      var hours = (\"0\" + Math.floor(timerTime / 3600000 % 60)).slice(-2);\n      return __jsx(\"div\", {\n        className: \"Countdown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }, __jsx(\"audio\", {\n        className: \"audioElement\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      }, __jsx(\"source\", {\n        src: \"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 41\n        }\n      })), __jsx(Helmet, {\n        defer: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, __jsx(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 31\n        }\n      }, \" \", minutes, \" : \", seconds, \" \")), __jsx(\"div\", {\n        className: styles.countdown,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        className: styles.counterBtn,\n        onClick: this.goSession,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }, \"25min session\"), __jsx(\"div\", {\n        className: styles.counterBtn,\n        onClick: this.goBreak,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, \"5min break\"), isBreak && isTicking && __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 38\n        }\n      }, \" break: \", minutes, \" min : \", seconds, \" \"), !isBreak && isTicking && __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 39\n        }\n      }, \" session: \", minutes, \" min : \", seconds, \" \"), !isTicking && __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 28\n        }\n      }, \"completed session: \", sessionCount)));\n    }\n  }]);\n\n  return Countdown;\n}(React.Component);\n\nexport default Countdown;","map":{"version":3,"sources":["/Users/nnoll/dev/firelist/client/components/countdown/index.js"],"names":["React","useEffect","Helmet","styles","Countdown","timerTime","sessionCount","isBreak","isTicking","gong","document","getElementsByClassName","play","timer","setInterval","newTime","state","setState","clearInterval","alert","playGong","sessionDuration","startTimer","seconds","Math","floor","slice","minutes","hours","countdown","counterBtn","goSession","goBreak","Component"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;IAEMC,S;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,SAAS,EAAE,KAAG,EAAH,GAAM,IADX;AACiB;AACvBC,MAAAA,YAAY,EAAE,CAFR;AAGNC,MAAAA,OAAO,EAAE,KAHH;AAINC,MAAAA,SAAS,EAAE;AAJL,K;;+DAOG,YAAM;AACf,UAAMC,IAAI,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,EAAgD,CAAhD,CAAb;AACAF,MAAAA,IAAI,CAACG,IAAL;AACD,K;;iEAEY,UAACL,OAAD,EAAa;AACxB,YAAKM,KAAL,GAAaC,WAAW,CAAC,YAAM;AAC7B,YAAMC,OAAO,GAAG,MAAKC,KAAL,CAAWX,SAAX,GAAuB,GAAvC;;AACA,YAAIU,OAAO,IAAI,CAAf,EAAkB;AAChB,gBAAKE,QAAL,CAAc;AACZZ,YAAAA,SAAS,EAAEU,OADC;AAEZR,YAAAA,OAAO,EAAEA,OAFG;AAGZC,YAAAA,SAAS,EAAE;AAHC,WAAd;AAKD,SAND,MAOK;AACHU,UAAAA,aAAa,CAAC,MAAKL,KAAN,CAAb;;AACA,gBAAKI,QAAL,CAAc;AACZT,YAAAA,SAAS,EAAE;AADC,WAAd;;AAGA,cAAGD,OAAH,EAAY;AACVY,YAAAA,KAAK,CAAC,YAAD,CAAL;;AACA,kBAAKC,QAAL;AACD,WAHD,MAIK;AACH,kBAAKH,QAAL,CAAc;AACZX,cAAAA,YAAY,EAAE,MAAKU,KAAL,CAAWV,YAAX,GAA0B;AAD5B,aAAd;;AAGA,kBAAKc,QAAL;;AACAD,YAAAA,KAAK,CAAC,cAAD,CAAL;AACD;AACF;AACF,OA1BuB,EA0BrB,GA1BqB,CAAxB;AA2BD,K;;gEAEW,YAAM;AAChBD,MAAAA,aAAa,CAAC,MAAKL,KAAN,CAAb;AACD,K;;gEAEW,YAAM;AAChB,UAAMQ,eAAe,GAAG,KAAG,EAAH,GAAM,EAA9B;;AACA,YAAKJ,QAAL,CAAc;AACZZ,QAAAA,SAAS,EAAEgB;AADC,OAAd;;AAGAH,MAAAA,aAAa,CAAC,MAAKL,KAAN,CAAb;;AACA,YAAKS,UAAL,CAAgB,KAAhB;AACD,K;;8DAES,YAAM;AACd,UAAMD,eAAe,GAAG,IAAE,EAAF,GAAK,GAA7B;;AACA,YAAKJ,QAAL,CAAc;AACZZ,QAAAA,SAAS,EAAEgB;AADC,OAAd;;AAGAH,MAAAA,aAAa,CAAC,MAAKL,KAAN,CAAb;;AACA,YAAKS,UAAL,CAAgB,IAAhB;AACD,K;;;;;;;6BAEO;AAAA,wBACkD,KAAKN,KADvD;AAAA,UACEX,SADF,eACEA,SADF;AAAA,UACaE,OADb,eACaA,OADb;AAAA,UACsBC,SADtB,eACsBA,SADtB;AAAA,UACiCF,YADjC,eACiCA,YADjC;AAEN,UAAIiB,OAAO,GAAG,CAAC,MAAOC,IAAI,CAACC,KAAL,CAAYpB,SAAS,GAAG,IAAb,GAAqB,EAAhC,IAAsC,EAA9C,EAAmDqB,KAAnD,CAAyD,CAAC,CAA1D,CAAd;AACA,UAAIC,OAAO,GAAG,CAAC,MAAMH,IAAI,CAACC,KAAL,CAAYpB,SAAS,GAAG,KAAb,GAAsB,EAAjC,CAAP,EAA6CqB,KAA7C,CAAmD,CAAC,CAApD,CAAd;AACA,UAAIE,KAAK,GAAG,CAAC,MAAMJ,IAAI,CAACC,KAAL,CAAYpB,SAAS,GAAG,OAAb,GAAwB,EAAnC,CAAP,EAA+CqB,KAA/C,CAAqD,CAAC,CAAtD,CAAZ;AAEA,aACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgC;AAAQ,QAAA,GAAG,EAAC,0DAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhC,CADF,EAEE,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAASC,OAAT,SAAqBJ,OAArB,MAAtB,CAFF,EAGE;AAAK,QAAA,SAAS,EAAEpB,MAAM,CAAC0B,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAE1B,MAAM,CAAC2B,UAAvB;AAAmC,QAAA,OAAO,EAAE,KAAKC,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAK,QAAA,SAAS,EAAE5B,MAAM,CAAC2B,UAAvB;AAAmC,QAAA,OAAO,EAAE,KAAKE,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,EAGIzB,OAAO,IAAIC,SAAX,IAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAcmB,OAAd,aAA8BJ,OAA9B,MAH7B,EAII,CAAChB,OAAD,IAAYC,SAAZ,IAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAgBmB,OAAhB,aAAgCJ,OAAhC,MAJ9B,EAKI,CAACf,SAAD,IAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAyBF,YAAzB,CALnB,CAHF,CADF;AAaD;;;;EApFqBN,KAAK,CAACiC,S;;AAuF9B,eAAe7B,SAAf","sourcesContent":["import React, { useEffect } from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport styles from './styles.module.scss'\n\nclass Countdown extends React.Component {\n  state = {\n    timerTime: 25*60*1000, //25min base time\n    sessionCount: 0,\n    isBreak: false,\n    isTicking: false,\n  }\n\n  playGong = () => {\n    const gong = document.getElementsByClassName(\"audioElement\")[0]\n    gong.play()\n  }\n\n  startTimer = (isBreak) => {\n    this.timer = setInterval(() => {\n      const newTime = this.state.timerTime - 100\n      if (newTime >= 0) {\n        this.setState({\n          timerTime: newTime,\n          isBreak: isBreak,\n          isTicking: true,\n        })\n      }\n      else {\n        clearInterval(this.timer)\n        this.setState({\n          isTicking: false\n        })\n        if(isBreak) {\n          alert(\"Break Done\")\n          this.playGong();\n        }\n        else {\n          this.setState({\n            sessionCount: this.state.sessionCount + 1\n          })\n          this.playGong();\n          alert(\"Session Done\")\n        }\n      }\n    }, 100)\n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer)\n  }\n\n  goSession = () => {\n    const sessionDuration = 25*60*10\n    this.setState({\n      timerTime: sessionDuration\n    })\n    clearInterval(this.timer)\n    this.startTimer(false)\n  }\n\n  goBreak = () => {\n    const sessionDuration = 5*60*100\n    this.setState({\n      timerTime: sessionDuration\n    })\n    clearInterval(this.timer)\n    this.startTimer(true)\n  }\n\n  render(){\n    const { timerTime, isBreak, isTicking, sessionCount } = this.state;\n    let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n    let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n\n    return (\n      <div className=\"Countdown\">\n        <audio className=\"audioElement\"><source src=\"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\"/></audio>\n        <Helmet defer={false}><title> {minutes} : {seconds} </title></Helmet>\n        <div className={styles.countdown}>\n          <div className={styles.counterBtn} onClick={this.goSession}>25min session</div>\n          <div className={styles.counterBtn} onClick={this.goBreak}>5min break</div>\n          { isBreak && isTicking && (<div> break: {minutes} min : {seconds} </div>) }\n          { !isBreak && isTicking && (<div> session: {minutes} min : {seconds} </div>) }\n          { !isTicking && (<div>completed session: {sessionCount}</div>) }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Countdown\n"]},"metadata":{},"sourceType":"module"}