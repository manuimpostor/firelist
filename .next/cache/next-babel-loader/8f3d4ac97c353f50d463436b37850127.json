{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/nnoll/dev/firelist/client/components/editableHeadline/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport styles from './styles.module.scss';\nimport ContentEditable from 'react-contenteditable';\nimport usePrevious from '../../helper/usePrevious';\n\nvar EditableHeadline = function EditableHeadline(_ref) {\n  _s();\n\n  var fireType = _ref.fireType,\n      fetchedTitle = _ref.fetchedTitle,\n      userId = _ref.userId;\n\n  var _useState = useState(fetchedTitle),\n      title = _useState[0],\n      setTitle = _useState[1];\n\n  var prevTitle = usePrevious(title); // update database here if blocks get added or removed\n\n  useEffect(function () {\n    var pushTitleToServer = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(title) {\n        var pushBody;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                pushBody = function pushBody() {\n                  if (fireType === \"primaryFire\") {\n                    return {\n                      userId: userId,\n                      primaryTitle: title\n                    };\n                  }\n\n                  if (fireType === \"secondaryFire\") {\n                    return {\n                      userId: userId,\n                      secondaryTitle: title\n                    };\n                  }\n\n                  if (fireType === \"dumpsterFire\") {\n                    return {\n                      userId: userId,\n                      dumpsterTitle: title\n                    };\n                  }\n                };\n\n                console.log(\"psuhing body\");\n                console.log(pushBody());\n                _context.prev = 3;\n                _context.next = 6;\n                return fetch('http://localhost:3001/fires', {\n                  method: \"PUT\",\n                  credentials: \"include\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify(pushBody())\n                });\n\n              case 6:\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](3);\n                console.log(_context.t0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 8]]);\n      }));\n\n      return function pushTitleToServer(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    if (prevTitle && prevTitle !== title) {\n      pushTitleToServer(title);\n    }\n  }, [title, prevTitle]);\n\n  var handleHTMLChange = function handleHTMLChange(e) {\n    setTitle(e.target.value);\n  };\n\n  return __jsx(ContentEditable, {\n    className: styles.headline,\n    html: title,\n    onChange: handleHTMLChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  });\n};\n\n_s(EditableHeadline, \"0TdMccYquYQynCyKFrr9MXBy8wU=\", false, function () {\n  return [usePrevious];\n});\n\n_c = EditableHeadline;\nexport default EditableHeadline;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableHeadline\");","map":{"version":3,"sources":["/Users/nnoll/dev/firelist/client/components/editableHeadline/index.js"],"names":["useState","useEffect","styles","ContentEditable","usePrevious","EditableHeadline","fireType","fetchedTitle","userId","title","setTitle","prevTitle","pushTitleToServer","pushBody","primaryTitle","secondaryTitle","dumpsterTitle","console","log","fetch","method","credentials","headers","body","JSON","stringify","handleHTMLChange","e","target","value","headline"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAwC;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;AAAA,MAA3BC,YAA2B,QAA3BA,YAA2B;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAAA,kBAErCR,QAAQ,CAACO,YAAD,CAF6B;AAAA,MAExDE,KAFwD;AAAA,MAEjDC,QAFiD;;AAG/D,MAAMC,SAAS,GAAGP,WAAW,CAACK,KAAD,CAA7B,CAH+D,CAK/D;;AACAR,EAAAA,SAAS,CAAC,YAAK;AACb,QAAMW,iBAAiB;AAAA,2EAAG,iBAAOH,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBI,gBAAAA,QADkB,GACP,SAAXA,QAAW,GAAM;AACrB,sBAAGP,QAAQ,KAAK,aAAhB,EAA8B;AAC5B,2BAAO;AAAEE,sBAAAA,MAAM,EAAEA,MAAV;AAAkBM,sBAAAA,YAAY,EAAEL;AAAhC,qBAAP;AACD;;AACD,sBAAGH,QAAQ,KAAK,eAAhB,EAAgC;AAC9B,2BAAO;AAAEE,sBAAAA,MAAM,EAAEA,MAAV;AAAkBO,sBAAAA,cAAc,EAAEN;AAAlC,qBAAP;AACD;;AACD,sBAAGH,QAAQ,KAAK,cAAhB,EAA+B;AAC7B,2BAAO;AAAEE,sBAAAA,MAAM,EAAEA,MAAV;AAAkBQ,sBAAAA,aAAa,EAAEP;AAAjC,qBAAP;AACD;AACF,iBAXuB;;AAYxBQ,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,EAApB;AAbwB;AAAA;AAAA,uBAehBM,KAAK,CAAE,6BAAF,EAAiC;AAC1CC,kBAAAA,MAAM,EAAE,KADkC;AAE1CC,kBAAAA,WAAW,EAAE,SAF6B;AAG1CC,kBAAAA,OAAO,EAAE;AAAE,oCAAgB;AAAlB,mBAHiC;AAI1CC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,QAAQ,EAAvB;AAJoC,iBAAjC,CAfW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBTI,gBAAAA,OAAO,CAACC,GAAR;;AArBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAjBN,iBAAiB;AAAA;AAAA;AAAA,OAAvB;;AAuBA,QAAID,SAAS,IAAIA,SAAS,KAAKF,KAA/B,EAAsC;AACpCG,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD;AACF,GA3BQ,EA2BN,CAACA,KAAD,EAAQE,SAAR,CA3BM,CAAT;;AA6BA,MAAMe,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD,EAAO;AAC9BjB,IAAAA,QAAQ,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,GAFD;;AAIA,SACE,MAAC,eAAD;AACE,IAAA,SAAS,EAAE3B,MAAM,CAAC4B,QADpB;AAEE,IAAA,IAAI,EAAErB,KAFR;AAGE,IAAA,QAAQ,EAAEiB,gBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CA9CD;;GAAMrB,gB;UAGcD,W;;;KAHdC,gB;AAgDN,eAAeA,gBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport styles from './styles.module.scss'\nimport ContentEditable from 'react-contenteditable'\nimport usePrevious from '../../helper/usePrevious'\n\nconst EditableHeadline = ({ fireType, fetchedTitle, userId }) => {\n\n  const [title, setTitle] = useState(fetchedTitle);\n  const prevTitle = usePrevious(title)\n\n  // update database here if blocks get added or removed\n  useEffect(() =>{\n    const pushTitleToServer = async (title) => {\n      const pushBody = () => {\n        if(fireType === \"primaryFire\"){\n          return { userId: userId, primaryTitle: title }\n        }\n        if(fireType === \"secondaryFire\"){\n          return { userId: userId, secondaryTitle: title }\n        }\n        if(fireType === \"dumpsterFire\"){\n          return { userId: userId, dumpsterTitle: title }\n        }\n      }\n      console.log(\"psuhing body\")\n      console.log(pushBody())\n      try {\n        await fetch ('http://localhost:3001/fires', {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(pushBody()),\n        })\n      } catch(err) { console.log(err)}\n    }\n    if (prevTitle && prevTitle !== title) {\n      pushTitleToServer(title)\n    }\n  }, [title, prevTitle])\n\n  const handleHTMLChange = (e) => {\n    setTitle(e.target.value)\n  }\n\n  return(\n    <ContentEditable\n      className={styles.headline}\n      html={title}\n      onChange={handleHTMLChange}\n    />\n  )\n}\n\nexport default EditableHeadline\n"]},"metadata":{},"sourceType":"module"}