{"ast":null,"code":"var _jsxFileName = \"/Users/nnoll/dev/firelist/client/components/countdown/index.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport styles from './styles.module.scss';\n\nclass Countdown extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      timerTime: 25 * 60 * 1000,\n      //25min base time\n      sessionCount: 0,\n      isBreak: false,\n      isTicking: false\n    });\n\n    _defineProperty(this, \"playGong\", () => {\n      const gong = document.getElementsByClassName(\"audioElement\")[0];\n      gong.play();\n    });\n\n    _defineProperty(this, \"startTimer\", isBreak => {\n      this.timer = setInterval(() => {\n        const newTime = this.state.timerTime - 100;\n\n        if (newTime >= 0) {\n          this.setState({\n            timerTime: newTime,\n            isBreak: isBreak,\n            isTicking: true\n          });\n        } else {\n          clearInterval(this.timer);\n          this.setState({\n            isTicking: false\n          });\n\n          if (isBreak) {\n            alert(\"Break Done\");\n            this.playGong();\n          } else {\n            this.setState({\n              sessionCount: this.state.sessionCount + 1\n            });\n            this.playGong();\n            alert(\"Session Done\");\n          }\n        }\n      }, 100);\n    });\n\n    _defineProperty(this, \"stopTimer\", () => {\n      clearInterval(this.timer);\n    });\n\n    _defineProperty(this, \"goSession\", () => {\n      const sessionDuration = 25 * 60 * 1000;\n      this.setState({\n        timerTime: sessionDuration\n      });\n      clearInterval(this.timer);\n      this.startTimer(false);\n    });\n\n    _defineProperty(this, \"goBreak\", () => {\n      const sessionDuration = 5 * 60 * 1000;\n      this.setState({\n        timerTime: sessionDuration\n      });\n      clearInterval(this.timer);\n      this.startTimer(true);\n    });\n  }\n\n  render() {\n    const {\n      timerTime,\n      isBreak,\n      isTicking,\n      sessionCount\n    } = this.state;\n    let seconds = (\"0\" + Math.floor(timerTime / 1000 % 60) % 60).slice(-2);\n    let minutes = (\"0\" + Math.floor(timerTime / 60000 % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor(timerTime / 3600000 % 60)).slice(-2);\n    return __jsx(\"div\", {\n      className: \"Countdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, __jsx(\"audio\", {\n      className: \"audioElement\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, __jsx(\"source\", {\n      src: \"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 41\n      }\n    })), __jsx(Helmet, {\n      defer: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 31\n      }\n    }, \" \", minutes, \" : \", seconds, \" \")), __jsx(\"div\", {\n      className: styles.countdown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: styles.counterBtn,\n      onClick: this.goSession,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, \"\\uD83D\\uDE80 25\"), __jsx(\"div\", {\n      className: styles.counterBtn,\n      onClick: this.goBreak,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, \"\\uD83E\\uDDD8 5\"), isBreak && isTicking && __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 38\n      }\n    }, \" \\uD83E\\uDDD8 \\u23F0 \", minutes, \" min : \", seconds, \" \"), !isBreak && isTicking && __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 39\n      }\n    }, \" \\uD83D\\uDE80 \\u23F0 \", minutes, \" min : \", seconds, \" \")));\n  }\n\n} // move back to render method if I want { !isTicking && (<div>completed session: {sessionCount}</div>) }\n\n\nexport default Countdown;","map":{"version":3,"sources":["/Users/nnoll/dev/firelist/client/components/countdown/index.js"],"names":["React","useEffect","Helmet","styles","Countdown","Component","timerTime","sessionCount","isBreak","isTicking","gong","document","getElementsByClassName","play","timer","setInterval","newTime","state","setState","clearInterval","alert","playGong","sessionDuration","startTimer","render","seconds","Math","floor","slice","minutes","hours","countdown","counterBtn","goSession","goBreak"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\"\nimport { Helmet } from \"react-helmet\"\nimport styles from './styles.module.scss'\n\nclass Countdown extends React.Component {\n  state = {\n    timerTime: 25*60*1000, //25min base time\n    sessionCount: 0,\n    isBreak: false,\n    isTicking: false,\n  }\n\n  playGong = () => {\n    const gong = document.getElementsByClassName(\"audioElement\")[0]\n    gong.play()\n  }\n\n  startTimer = (isBreak) => {\n    this.timer = setInterval(() => {\n      const newTime = this.state.timerTime - 100\n      if (newTime >= 0) {\n        this.setState({\n          timerTime: newTime,\n          isBreak: isBreak,\n          isTicking: true,\n        })\n      }\n      else {\n        clearInterval(this.timer)\n        this.setState({\n          isTicking: false\n        })\n        if(isBreak) {\n          alert(\"Break Done\")\n          this.playGong();\n        }\n        else {\n          this.setState({\n            sessionCount: this.state.sessionCount + 1\n          })\n          this.playGong();\n          alert(\"Session Done\")\n        }\n      }\n    }, 100)\n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer)\n  }\n\n  goSession = () => {\n    const sessionDuration = 25*60*1000\n    this.setState({\n      timerTime: sessionDuration\n    })\n    clearInterval(this.timer)\n    this.startTimer(false)\n  }\n\n  goBreak = () => {\n    const sessionDuration = 5*60*1000\n    this.setState({\n      timerTime: sessionDuration\n    })\n    clearInterval(this.timer)\n    this.startTimer(true)\n  }\n\n  render(){\n    const { timerTime, isBreak, isTicking, sessionCount } = this.state;\n    let seconds = (\"0\" + (Math.floor((timerTime / 1000) % 60) % 60)).slice(-2);\n    let minutes = (\"0\" + Math.floor((timerTime / 60000) % 60)).slice(-2);\n    let hours = (\"0\" + Math.floor((timerTime / 3600000) % 60)).slice(-2);\n\n    return (\n      <div className=\"Countdown\">\n        <audio className=\"audioElement\"><source src=\"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\"/></audio>\n        <Helmet defer={false}><title> {minutes} : {seconds} </title></Helmet>\n        <div className={styles.countdown}>\n          <div className={styles.counterBtn} onClick={this.goSession}>🚀 25</div>\n          <div className={styles.counterBtn} onClick={this.goBreak}>🧘 5</div>\n          { isBreak && isTicking && (<div> 🧘 ⏰ {minutes} min : {seconds} </div>) }\n          { !isBreak && isTicking && (<div> 🚀 ⏰ {minutes} min : {seconds} </div>) }\n        </div>\n      </div>\n    )\n  }\n}\n\n// move back to render method if I want { !isTicking && (<div>completed session: {sessionCount}</div>) }\nexport default Countdown\n"]},"metadata":{},"sourceType":"module"}