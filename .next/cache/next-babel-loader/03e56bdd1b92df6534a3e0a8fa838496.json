{"ast":null,"code":"var _jsxFileName = \"/Users/nnoll/dev/firelist/client/components/editableHeadline/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport styles from './styles.module.scss';\nimport ContentEditable from 'react-contenteditable';\nimport usePrevious from '../../helper/usePrevious';\n\nconst EditableHeadline = ({\n  fireType,\n  fetchedTitle,\n  userId\n}) => {\n  const {\n    0: title,\n    1: setTitle\n  } = useState(fetchedTitle);\n  const prevTitle = usePrevious(title); // update database here if blocks get added or removed\n\n  useEffect(() => {\n    const pushTitleToServer = async title => {\n      const pushBody = () => {\n        if (fireType === \"primaryFire\") {\n          return {\n            userId: userId,\n            primaryTitle: title\n          };\n        }\n\n        if (fireType === \"secondaryFire\") {\n          return {\n            userId: userId,\n            secondaryTitle: title\n          };\n        }\n\n        if (fireType === \"dumpsterFire\") {\n          return {\n            userId: userId,\n            dumpsterTitle: title\n          };\n        }\n      };\n\n      console.log(\"psuhing body\");\n      console.log(pushBody());\n\n      try {\n        await fetch('http://localhost:3001/fires', {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(pushBody())\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    if (prevTitle && prevTitle !== title) {\n      pushTitleToServer(title);\n    }\n  }, [title, prevTitle]);\n\n  const handleHTMLChange = e => {\n    setTitle(e.target.value);\n  };\n\n  return __jsx(ContentEditable, {\n    className: styles.headline,\n    html: title,\n    onChange: handleHTMLChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default EditableHeadline;","map":{"version":3,"sources":["/Users/nnoll/dev/firelist/client/components/editableHeadline/index.js"],"names":["useState","useEffect","styles","ContentEditable","usePrevious","EditableHeadline","fireType","fetchedTitle","userId","title","setTitle","prevTitle","pushTitleToServer","pushBody","primaryTitle","secondaryTitle","dumpsterTitle","console","log","fetch","method","credentials","headers","body","JSON","stringify","err","handleHTMLChange","e","target","value","headline"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,YAAZ;AAA0BC,EAAAA;AAA1B,CAAD,KAAwC;AAE/D,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAACO,YAAD,CAAlC;AACA,QAAMI,SAAS,GAAGP,WAAW,CAACK,KAAD,CAA7B,CAH+D,CAK/D;;AACAR,EAAAA,SAAS,CAAC,MAAK;AACb,UAAMW,iBAAiB,GAAG,MAAOH,KAAP,IAAiB;AACzC,YAAMI,QAAQ,GAAG,MAAM;AACrB,YAAGP,QAAQ,KAAK,aAAhB,EAA8B;AAC5B,iBAAO;AAAEE,YAAAA,MAAM,EAAEA,MAAV;AAAkBM,YAAAA,YAAY,EAAEL;AAAhC,WAAP;AACD;;AACD,YAAGH,QAAQ,KAAK,eAAhB,EAAgC;AAC9B,iBAAO;AAAEE,YAAAA,MAAM,EAAEA,MAAV;AAAkBO,YAAAA,cAAc,EAAEN;AAAlC,WAAP;AACD;;AACD,YAAGH,QAAQ,KAAK,cAAhB,EAA+B;AAC7B,iBAAO;AAAEE,YAAAA,MAAM,EAAEA,MAAV;AAAkBQ,YAAAA,aAAa,EAAEP;AAAjC,WAAP;AACD;AACF,OAVD;;AAWAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,EAApB;;AACA,UAAI;AACF,cAAMM,KAAK,CAAE,6BAAF,EAAiC;AAC1CC,UAAAA,MAAM,EAAE,KADkC;AAE1CC,UAAAA,WAAW,EAAE,SAF6B;AAG1CC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WAHiC;AAI1CC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,QAAQ,EAAvB;AAJoC,SAAjC,CAAX;AAMD,OAPD,CAOE,OAAMa,GAAN,EAAW;AAAET,QAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAAiB;AACjC,KAtBD;;AAuBA,QAAIf,SAAS,IAAIA,SAAS,KAAKF,KAA/B,EAAsC;AACpCG,MAAAA,iBAAiB,CAACH,KAAD,CAAjB;AACD;AACF,GA3BQ,EA2BN,CAACA,KAAD,EAAQE,SAAR,CA3BM,CAAT;;AA6BA,QAAMgB,gBAAgB,GAAIC,CAAD,IAAO;AAC9BlB,IAAAA,QAAQ,CAACkB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,GAFD;;AAIA,SACE,MAAC,eAAD;AACE,IAAA,SAAS,EAAE5B,MAAM,CAAC6B,QADpB;AAEE,IAAA,IAAI,EAAEtB,KAFR;AAGE,IAAA,QAAQ,EAAEkB,gBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CA9CD;;AAgDA,eAAetB,gBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport styles from './styles.module.scss'\nimport ContentEditable from 'react-contenteditable'\nimport usePrevious from '../../helper/usePrevious'\n\nconst EditableHeadline = ({ fireType, fetchedTitle, userId }) => {\n\n  const [title, setTitle] = useState(fetchedTitle);\n  const prevTitle = usePrevious(title)\n\n  // update database here if blocks get added or removed\n  useEffect(() =>{\n    const pushTitleToServer = async (title) => {\n      const pushBody = () => {\n        if(fireType === \"primaryFire\"){\n          return { userId: userId, primaryTitle: title }\n        }\n        if(fireType === \"secondaryFire\"){\n          return { userId: userId, secondaryTitle: title }\n        }\n        if(fireType === \"dumpsterFire\"){\n          return { userId: userId, dumpsterTitle: title }\n        }\n      }\n      console.log(\"psuhing body\")\n      console.log(pushBody())\n      try {\n        await fetch ('http://localhost:3001/fires', {\n          method: \"PUT\",\n          credentials: \"include\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(pushBody()),\n        })\n      } catch(err) { console.log(err)}\n    }\n    if (prevTitle && prevTitle !== title) {\n      pushTitleToServer(title)\n    }\n  }, [title, prevTitle])\n\n  const handleHTMLChange = (e) => {\n    setTitle(e.target.value)\n  }\n\n  return(\n    <ContentEditable\n      className={styles.headline}\n      html={title}\n      onChange={handleHTMLChange}\n    />\n  )\n}\n\nexport default EditableHeadline\n"]},"metadata":{},"sourceType":"module"}